import{H as _,J as x,g as I,B as p,t as d,f}from"./index--nVTC40K.js";import{S as F,A as v}from"./Square-DDUE-dn0.js";class A extends _{static async getImageByPath(a){const{path:t,resourceManager:r,defaultValue:e,maxWidth:i,maxHeight:w,crop:c,objects:n,scale:o}=a;if(t.extension==="svg+xml")return await this.getImageFromSvgPath(t,r);const s=await this.getFileByPath(t,r),g=this._calculateScaledDimension(i,e,o),m=this._calculateScaledDimension(w,x,o),h=await I.getImageSizeFromImageData(s),y=await this._createImageFromBuffer(s),{imageBuffer:B,image:S}=await this._cropImage(s,y,h,c),l=await I.getImageSizeFromImageData(B,g,m);return!o||this._scaleSize(l,g),{imageBuffer:await this._addObjectsToImage(l,S,B,n,g,e),size:l}}static _createImageFromBuffer(a){return new Promise((t,r)=>{const e=new Image;e.onload=()=>t(e),e.onerror=i=>r(i),e.src=URL.createObjectURL(new Blob([a]))})}static async _cropImage(a,t,r,e){return e&&(a=p.from(await this._cropImageToBuffer(t,e,r)),r=await I.getImageSizeFromImageData(a),t=await this._createImageFromBuffer(a)),{imageBuffer:a,image:t,size:r}}static async _cropImageToBuffer(a,t,r){const e=document.createElement("canvas"),i=e.getContext("2d");if(!i)throw new Error(d("word.error.canvas-error"));const w=r.width*t.x/100,c=r.height*t.y/100,n=r.width*t.w/100,o=r.height*t.h/100;return e.width=n,e.height=o,i.drawImage(a,w,c,n,o,0,0,n,o),new Promise((s,g)=>{e.toBlob(m=>{m||g(new Error(d("word.error.canvas-to-blob-error")));const h=new FileReader;h.onloadend=()=>s(new Uint8Array(h.result)),h.readAsArrayBuffer(m)},"image/png")})}static async _addObjectsToImage(a,t,r,e,i,w){if(e?.length>0){const c=document.createElement("canvas"),n=c.getContext("2d");if(!n)throw new Error(d("word.error.canvas-error"));c.width=a.width*f,c.height=a.height*f,n.scale(f,f),n.drawImage(t,0,0,a.width,a.height),e.forEach((o,s)=>{o.type==="square"?new F(i??w,a.width).draw(n,o,(s+1).toString(),a,e.length>1):o.type==="annotation"&&new v(i??w,a.width).draw(n,o,(s+1).toString(),a,e.length>1)}),r=p.from(await new Promise((o,s)=>{c.toBlob(g=>{g||s(new Error(d("word.error.canvas-to-blob-error")));const m=new FileReader;m.onloadend=()=>o(new Uint8Array(m.result)),m.readAsArrayBuffer(g)},"image/png")}))}return r}}const H=u=>A.getImageByPath(u);export{H as default};
